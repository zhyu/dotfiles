
# If not in tmux nor executing zsh script, start tmux
# Note: `tmux attach` should not be wrapped, otherwise the connection will be closed
# when connecting to a server via ssh and there are no tmux sessions to attach to.
# The `exit` part would exit ssh and terminate the connection when detach or exit tmux.
if [[ -z ${TMUX+X}${ZSH_SCRIPT+X}${ZSH_EXECUTION_STRING+X} ]]; then
  # This is very important for nerdfont glyphs to work inside tmux: https://gitlab.com/gnachman/iterm2/-/issues/10879#note_1433417922
  export LANG=en_US.UTF-8
  tmux attach || exec tmux new && exit;
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

zstyle ':omz:update' mode disabled

ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(vi-mode tmux fzf common-aliases fasd git python nvm brew fzf-tab zsh-autosuggestions fast-syntax-highlighting)

VI_MODE_SET_CURSOR=true
VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
MODE_INDICATOR="%F{cyan}<~~%f"

source $ZSH/oh-my-zsh.sh

# User configuration

# Server only setup
# symlink ~/.ssh/ssh_auth_sock to $SSH_AUTH_SOCK, then set the env var
# to a fixed location. It will help the tmux/screen
# sessions finding the ssh agent forwarded by differnt ssh sessions.
#
# Creating the symlink in ~/.ssh/rc could do it after the ssh connection
# being established, however, when using Eternal Terminal (et), et will
# set the ssh agent to a different location after ~/.ssh/rc executed,
# which makes ~/.ssh/ssh_auth_sock links to a non-functional location.
# So setting the symlink in ~/.zshrc is easier.
if [[ -n $SSH_CONNECTION ]]; then
    # Prevent recursive link, otherwise when opening tmux, ~/.ssh/ssh_auth_sock
    # will be linked to itself. Since Eternal Terminal won't delete old socket
    # files, we couldn't check whether ~/.ssh/ssh_auth_sock is a socket file
    # ([ ! -S ~/.ssh/ssh_auth_sock ]) to achieve the same goal
    if [ -S "$SSH_AUTH_SOCK" ] && [ ! "$SSH_AUTH_SOCK" -ef ~/.ssh/ssh_auth_sock ]; then
        ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
        export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
    fi
fi

# human-readable sizes
alias df='df -h'

# Disable unwanted aliases defined in common-aliases plugin
unalias 'P' 'G'
alias -g G='| rg'

# enable the nice builtin zmv
autoload -U zmv
# noglob: no need to quote wildcards
# -W: auto convert wildcards to the proper format, e.g., no need to use capture groups
alias mmv='noglob zmv -W'

# neovim :)
alias vim='nvim'
alias vimdiff='nvim -d '

# use vim when edit-command-line
export VISUAL=nvim
export EDITOR="${VISUAL}"

# fzf settings
# use fd as backend of fzf, it will respect ignore files like .gitignore
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
# use Ctrl-T to fuzzy search recent accessed files and directories
export FZF_CTRL_T_COMMAND='fasd -Rl'
# Use fd instead of the default find command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# Disable unwanted aliases defined by fasd
unalias j o z v

# fasd & fzf change directory - jump using `fasd` if given argument, filter output of `fasd` using `fzf` else
z() {
    [ $# -gt 0 ] && fasd_cd -d "$*" && return
    local dir
    dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
}
# fasd & fzf change directory - open best matched file using `fasd` if given argument, filter output of `fasd` using `fzf` else
v() {
    [ $# -gt 0 ] && fasd -f -e ${EDITOR} "$*" && return
    local file
    file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && ${EDITOR} "${file}" || return 1
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# source
if [[ -f $HOME/.zshrc.post ]]; then
  source $HOME/.zshrc.post
fi
