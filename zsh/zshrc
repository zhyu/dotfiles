# If not in tmux nor executing zsh script, start tmux
#
# Although the tmux plugin of omz could achieve the same, it doesn't play well with
# p10k instant prompt, especially connecting to a server via ssh.
# Ref: https://github.com/romkatv/powerlevel10k/issues/1203#issuecomment-754805535
#
# Note: `tmux attach` should not be wrapped with `exec`, otherwise the connection will
# be closed when connecting to a server via ssh and there are no tmux sessions to attach to.
# The `exit` part would exit ssh and terminate the connection when detach or exit tmux.
if [[ -z ${TMUX+X}${ZSH_SCRIPT+X}${ZSH_EXECUTION_STRING+X} ]]; then
  # This is very important for nerdfont glyphs to work inside tmux
  # Ref: https://gitlab.com/gnachman/iterm2/-/issues/10879#note_1433417922
  export LANG=en_US.UTF-8
  tmux attach || exec tmux new && exit;
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

zstyle ':omz:update' mode disabled

ZSH_THEME="powerlevel10k/powerlevel10k"
VI_MODE_SET_CURSOR=true

# posix-alias is dropped from the default opts to avoid defining unnecessary aliases
_FASD_INIT_OPTS=(
  zsh-hook
  zsh-ccomp
  zsh-ccomp-install
  zsh-wcomp
  zsh-wcomp-install
)

plugins=(
  vi-mode
  aliases
  fzf-conf
  fasd
  fasd-conf
  git
  git-jira
  python
  poetry-env
  nvm
  kubectl
  # it's important to load fzf-tab and zsh-autosuggestions in the following order,
  # otherwise, pressing <Tab> for the autocompletion may crash the terminal
  fzf-tab
  fzf-tab-conf
  zsh-autosuggestions
)

# init linuxbrew
test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# brew completion needs to be set before source oh-my-zsh.sh
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

source $ZSH/oh-my-zsh.sh

# User configuration

# Server only setup
# symlink ~/.ssh/ssh_auth_sock to $SSH_AUTH_SOCK, then set the env var
# to a fixed location. It will help the tmux/screen
# sessions finding the ssh agent forwarded by differnt ssh sessions.
#
# Creating the symlink in ~/.ssh/rc could do it after the ssh connection
# being established, however, when using Eternal Terminal (et), et will
# set the ssh agent to a different location after ~/.ssh/rc executed,
# which makes ~/.ssh/ssh_auth_sock links to a non-functional location.
# So setting the symlink in ~/.zshrc is easier.
if [[ -n $SSH_CONNECTION ]]; then
    # Prevent recursive link, otherwise when opening tmux, ~/.ssh/ssh_auth_sock
    # will be linked to itself. Since Eternal Terminal won't delete old socket
    # files, we couldn't check whether ~/.ssh/ssh_auth_sock is a socket file
    # ([ ! -S ~/.ssh/ssh_auth_sock ]) to achieve the same goal
    if [ -S "$SSH_AUTH_SOCK" ] && [ ! "$SSH_AUTH_SOCK" -ef ~/.ssh/ssh_auth_sock ]; then
        ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
        export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
    fi
fi

# use vim when edit-command-line
export VISUAL=nvim
export EDITOR="${VISUAL}"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# source
if [[ -f $HOME/.zshrc.post ]]; then
  source $HOME/.zshrc.post
fi
